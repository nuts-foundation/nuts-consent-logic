// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"time"
)

// ActorURI defines component schema for ActorURI.
type ActorURI string

// ConsentValidationRequest defines component schema for ConsentValidationRequest.
type ConsentValidationRequest struct {
	ConsentId *string `json:"consentId,omitempty"`
}

// CreateConsentRequest defines component schema for CreateConsentRequest.
type CreateConsentRequest struct {
	Actors       []ActorURI `json:"actors"`
	ConsentProof struct {
		// Embedded struct due to allOf(#/components/schemas/EmbeddedData)
		EmbeddedData
	} `json:"consentProof,omitempty"`
	Custodian CustodianURI   `json:"custodian"`
	Performer *IdentifierURI `json:"performer,omitempty"`
	Period    *Period        `json:"period,omitempty"`
	Subject   SubjectURI     `json:"subject"`
}

// CustodianURI defines component schema for CustodianURI.
type CustodianURI string

// EmbeddedData defines component schema for EmbeddedData.
type EmbeddedData struct {
	ContentType string `json:"contentType"`
	Data        string `json:"data"`
}

// IdentifierURI defines component schema for IdentifierURI.
type IdentifierURI string

// JobCreatedResponse defines component schema for JobCreatedResponse.
type JobCreatedResponse struct {
	JobId      *string `json:"jobId,omitempty"`
	ResultCode *string `json:"resultCode,omitempty"`
}

// Period defines component schema for Period.
type Period struct {
	End   *time.Time `json:"end,omitempty"`
	Start time.Time  `json:"start"`
}

// SubjectURI defines component schema for SubjectURI.
type SubjectURI string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new consent. (POST /api/consent)
	NutsConsentLogicCreateConsent(ctx echo.Context) error
	// Create the validity of a consent-request job (POST /api/consent/validation)
	NutsConsentLogicValidateConsent(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// NutsConsentLogicCreateConsent converts echo context to params.
func (w *ServerInterfaceWrapper) NutsConsentLogicCreateConsent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NutsConsentLogicCreateConsent(ctx)
	return err
}

// NutsConsentLogicValidateConsent converts echo context to params.
func (w *ServerInterfaceWrapper) NutsConsentLogicValidateConsent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NutsConsentLogicValidateConsent(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/api/consent", wrapper.NutsConsentLogicCreateConsent)
	router.POST("/api/consent/validation", wrapper.NutsConsentLogicValidateConsent)

}

