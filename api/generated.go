// Package api provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"strings"
	"time"
)

// ActorURI defines component schema for ActorURI.
type ActorURI string

// ConsentValidationRequest defines component schema for ConsentValidationRequest.
type ConsentValidationRequest struct {
	ConsentId *string `json:"consentId,omitempty"`
}

// CreateConsentRequest defines component schema for CreateConsentRequest.
type CreateConsentRequest struct {
	Actors       []ActorURI `json:"actors"`
	ConsentProof struct {
		// Embedded struct due to allOf(#/components/schemas/EmbeddedData)
		EmbeddedData
	} `json:"consentProof,omitempty"`
	Custodian CustodianURI   `json:"custodian"`
	Performer *IdentifierURI `json:"performer,omitempty"`
	Period    *Period        `json:"period,omitempty"`
	Subject   SubjectURI     `json:"subject"`
}

// CustodianURI defines component schema for CustodianURI.
type CustodianURI string

// EmbeddedData defines component schema for EmbeddedData.
type EmbeddedData struct {
	ContentType string `json:"contentType"`
	Data        string `json:"data"`
}

// IdentifierURI defines component schema for IdentifierURI.
type IdentifierURI string

// JobCreatedResponse defines component schema for JobCreatedResponse.
type JobCreatedResponse struct {
	JobId      *string `json:"jobId,omitempty"`
	ResultCode *string `json:"resultCode,omitempty"`
}

// Period defines component schema for Period.
type Period struct {
	End   *time.Time `json:"end,omitempty"`
	Start time.Time  `json:"start"`
}

// SubjectURI defines component schema for SubjectURI.
type SubjectURI string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new consent. (POST /api/consent)
	NutsConsentLogicCreateConsent(ctx echo.Context) error
	// Create the validity of a consent-request job (POST /api/consent/validation)
	NutsConsentLogicValidateConsent(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// NutsConsentLogicCreateConsent converts echo context to params.
func (w *ServerInterfaceWrapper) NutsConsentLogicCreateConsent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NutsConsentLogicCreateConsent(ctx)
	return err
}

// NutsConsentLogicValidateConsent converts echo context to params.
func (w *ServerInterfaceWrapper) NutsConsentLogicValidateConsent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NutsConsentLogicValidateConsent(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/api/consent", wrapper.NutsConsentLogicCreateConsent)
	router.POST("/api/consent/validation", wrapper.NutsConsentLogicValidateConsent)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

