openapi: 3.0.0
info:
  title: Nuts consent logic
  version: 0.0.1
  description: >
    This service does most of the heavy lifting around creating consent. It depends on all the other components in *service space*.

    For example, when creating a new consent request, this is send to the component it then checks if it's valid by using the validation component.

    Next it has to find the correct organizations and encrypt the record with the right public keys.

    Then it has to send the encrypted record to the Consent bridge for synchronization.


    Also when a new consent event is received by the component from the consent bridge, it needs to decrypt it and check its validity.

    If valid it has to be send to vendor space to check if the subject is really a patient for that care organization.
paths:
  '/api/consent':
    post:
      summary: Create or update a new consent.
      description: |
        Create or update a consent for the triple custodian, subject and actor.

        If this is the first registration for the triple, a new PatientConsent with ConsentRecords will be created.
        ConsentRecords can be added to a PatientConsent by calling the endpoint again with new records.
        ConsentRecords can be 'updated' by calling the endpoint again with a new record which refers to the PreviousRecordID. The old record gets archived and replaced by the new ConsentRecord.
        ConsentRecords can be 'deleted' by updating the ConsentRecord with a new Period.End. For clarity to the network, a valid proof describing why the consent ended must be provided.

        During the initiation of a consent-flow, it performs the following steps:
        * Check custodian is in the list of Vendors of this node
        * Get the consentID for the subject
        * For each ConsentRecord create a FHIR Consent-resource
        * Validate the FHIR Consent-resources
        * Get a new shared key from _crypto service_
        * Encrypt the FHIR Consent-resources with shared key
        * For each actor: get the public key from registry
        * For each actor: encrypt the shared key with actors public key
        * Create request to consent bridge

        The endpoint returns a JobID which can be used to track the progress while it is in flight.
      operationId: createOrUpdateConsent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsentRequest'

      responses:
        202:
          description: |
            Request received. This does not mean the consent is created. Check the resultCode for that. If the request was successful a job has been created which can be checked for status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCreatedResponse'
components:
  schemas:
    JobCreatedResponse:
      type: object
      required:
        - resultCode
      properties:
        resultCode:
          type: string
          enum: ["OK", "NOK"]
        jobId:
          type: string
          example: '123'
    CreateConsentRequest:
      type: object
      required:
        - subject
        - custodian
        - actor
        - records
      properties:
        subject:
          $ref: "#/components/schemas/SubjectURI"
        custodian:
          $ref: "#/components/schemas/CustodianURI"
        actor:
          $ref: "#/components/schemas/ActorURI"
        performer:
          description: >
            A cryptographic identity of the performer, the
            person who administers the consent. This field
            is optional. If no performer can be identified
            the consentProof field is mandatory.
          $ref: "#/components/schemas/IdentifierURI"
        records:
          type: array
          items:
            $ref: "#/components/schemas/ConsentRecord"
    Period:
      type: object
      required:
        - start
      properties:
        start:
          type: string
          format: date-time
          example: "2019-05-20T17:02:33+10:00"
        end:
          type: string
          format: date-time
          example: "2019-11-20T17:02:33+10:00"
    DocumentReference:
      type: object
      required:
        - ID
        - title
      properties:
        ID:
          type: string
          description: unique identifier useable for retrieving the proof when contacting the care provider (technical or on paper)
          example: '11112222-2222-3333-4444-555566667777'
        title:
          type: string
          description: 'human readable identifier for consent proof, eg: document name'
          example: 'Toestemming inzage huisarts.pdf'
        URL:
          type: string
          description: location where the proof document can be found, should accept Nuts based authentication
          example: 'https://some.url/path/to/reference.pdf'
        contentType:
          type: string
          example: 'application/pdf'
        hash:
          type: string
          description: base64 encoded sha256 of the document
    IdentifierURI:
      type: string
      description: "URI defining a party such as a person or organization"
      example: "urn:oid:2.16.840.1.113883.2.4.6.1:#00000007"
    ActorURI:
      type: string
      description: "URI defining the actor, usually a practitioner"
      example: "urn:oid:2.16.840.1.113883.2.4.6.1:00000007"
    CustodianURI:
      type: string
      description: "URI defining an organization, usually the custodian or actor"
      example: "urn:oid:2.16.840.1.113883.2.4.6.1:00000000"
    SubjectURI:
      type: string
      description: "URI defining the data subject, usually the patient"
      example: "urn:oid:2.16.840.1.113883.2.4.6.3:999999990"
    DataClassification:
      type: string
      description: 'Nuts classification system identifier'
      example: 'urn:oid:1.3.6.1.4.1.XXXXX.1.1:MEDICAL'
    ConsentRecord:
      type: object
      required:
        - consentProof
        - dataClass
        - period
      properties:
        consentProof:
          $ref: "#/components/schemas/DocumentReference"
        previousRecordID:
          type: string
          description: |
            Optional parameter. If provided, the previous consentRecord will be replaced by this new ConsentRecord.
        period:
          $ref: "#/components/schemas/Period"
        dataClass:
          type: array
          items:
            $ref: "#/components/schemas/DataClassification"
